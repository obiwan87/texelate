{
  parserClass="com.lasagnerd.texelate.microbool.MicroboolParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Microbool"
  psiImplClassSuffix="Impl"
  psiPackage="com.lasagnerd.texelate.microbool.psi"
  psiImplPackage="com.lasagnerd.texelate.microbool.psi.impl"

  elementTypeHolderClass="com.lasagnerd.texelate.microbool.psi.MicroboolTypes"
  elementTypeClass="com.lasagnerd.texelate.microbool.psi.MicroboolElementType"
  tokenTypeClass="com.lasagnerd.texelate.microbool.psi.MicroboolTokenType"

  tokens=[
    OPERATOR_AND='and'
    OPERATOR_OR='or'
    OPERATOR_NOT='not'

    SPACE='regexp:[ \t]+'
    BOOL='regexp:(True|False)'
    IDENTIFIER='regexp:[A-Za-z_][A-Za-z0-9_]*'

    OPERATOR_EQUALITY='=='
    OPERATOR_INEQUALITY='!='
    STRING_LITERAL='regexp:\".*?\"'
    INT_LITERAL='regexp:[0-9]+'
    DECIMAL_LITERAL='regexp:[0-9]+\\.[0-9]+'
  ]
  name('.*expression') = expression
  extends('.*_expression.*') = expression
  extends('^binary.*') = binary_operator
  extends('^unary.*') = unary_operator
}

microboolFile ::= expression

expression ::= binary_expression
        | unary_expression
        | primary

binary_expression                     ::= expression binary_operator expression
binary_operator                       ::= binary_operator_or | binary_operator_and | binary_operator_equality | binary_operator_inequality
binary_operator_or                    ::= OPERATOR_OR
binary_operator_and                   ::= OPERATOR_AND
binary_operator_equality              ::= OPERATOR_EQUALITY
binary_operator_inequality            ::= OPERATOR_INEQUALITY

unary_expression         ::= unary_operator expression
unary_operator           ::= unary_operator_not
unary_operator_not       ::= OPERATOR_NOT

private primary            ::= reference_expression | bool_literal_expression | string_literal_expression | int_literal_expression | decimal_literal_expression
bool_literal_expression    ::= BOOL
reference_expression       ::= IDENTIFIER
string_literal_expression  ::= STRING_LITERAL
int_literal_expression     ::= INT_LITERAL
decimal_literal_expression ::= DECIMAL_LITERAL
